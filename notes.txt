Given at timestep t:
(x, y always in worldspace; s, d always in Frenet)

EGO:
- car_x
- car_y
- car_s
- car_d
- car_yaw (in degrees)
- car_speed

PATH PLANNER:
// Previous path data given to the Planner
- previous_path_x (vector<double>)
- previous_path_y (vector<double>)
// Previous path's end s and d values 
- end_path_s
- end_path_d

TRAFFIC:
a list of all other cars on the same side of the road.
- sensor_fusion (vector<vector<double>>? [id, x, y, vx, vy, s, d])
-- looks like only 12 cars are ever on our side of the road

MAP:
- map_waypoints_x
- map_waypoints_y
- map_waypoints_s
- map_waypoints_dx
- map_waypoints_dy
// The max s value before wrapping around the track back to 0
- max_s
#########
The highway is a total of 6 lanes, where there are 3 lanes on each side. Each lane is 4 m wide
The d vector has a magnitude of 1 and points perpendicular to the road in the direction of the right hand side of the road. The d vector can be used to reference lane positions, for instance if you want to be in the middle lane at some way point just add the way points (x,y) with the d vector multiplied by 6 = (2+4), since each lane is 4 m.


PROCESS:
- figured out given data (above)
- run small tests to make sure I understand how simulator interprets data
-- just go straight
-- follow center lane
- for easier debugging, looked into doing simple data plots straight from C++
-- matplotlibcpp
-- plotting sensor fusion data into the environment cleared up where the other cars are located throughout he simulation (make sure they are not distributed all over the track)
